#include <iostream>
#include <fstream>
//#include <opencv2/core/core.hpp>
//#include <opencv2/highgui/highgui.hpp>
//#include <wchar.h>
#include <opencv2/opencv.hpp>
//#include <windows.h>
#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include <cv.h>
//#include "SLIC.h"

typedef unsigned int UINT;
using namespace cv;
using namespace std;


int main()
{
    /*读入文件*/

	//用于结束程序
	int a = 0;
	//输入缓存
	char buffer[256];
	char * pch;

	//用于Rodrigues2的数组
	double r[3];
	double rot_mat[9];

	//应该是数据初始化数组
	CvMat pr_vec;
	CvMat pR_matrix;

	//文件位置
	string input_file_path = "D:\\workspace\\Blender\\3d_gt\\bunny\\bunny_gtpose.txt";
	string output_file_path = "D:\\workspace\\Blender\\3d_gt\\bunny\\cam_location.txt";

	//输入输出流
	ifstream in;
	in.open(input_file_path, ios::in);
	ofstream(out);
	out.open(output_file_path, ios::out | ios::trunc);

	//判断文件是否正常打开
	if (!in.is_open())
	{
		cout << "ERROR opening file input file" << endl;
		exit(1);
	}

	//先来一下，然后判断in.eof()， 这样可以避免内存溢出错误
	in.getline(buffer, 100);
	//开始处理文件
	while (!in.eof()) {
		
//		cout << buffer << endl;
		

		//输出帧号
		pch = strtok(buffer, " ");
		out << pch << " ";

		//处理旋转
		for (int i = 0; i < 3; i++) {
			pch = strtok(NULL, " ");
			string fc(pch);
			float f = stof(fc);
			r[i] = double(f);
		}


		cvInitMatHeader(&pr_vec, 1, 3, CV_64FC1, r, CV_AUTOSTEP);
		cvInitMatHeader(&pR_matrix, 3, 3, CV_64FC1, rot_mat, CV_AUTOSTEP);
		cvRodrigues2(&pr_vec, &pR_matrix, 0);

		for (int i = 0; i < 9; i++) {
			out << rot_mat[i] << " ";
		}


		pch = strtok(NULL, " ");

		while (pch != NULL)
		{
			out << pch << " ";
			pch = strtok(NULL, " ");
		}

		out << endl;

		in.getline(buffer, 100);
	}

	std::cin >> a;
	in.close();
	out.close();
	
	return 0;
   

/* 分割数字*/
/*	int a;
	char str[] = "0 2.51185 0.0654008 -0.0426138 1.71859 6.2491 71.5207";
	char * pch;
	printf("Splitting string \"%s\" into tokens:\n", str);
	pch = strtok(str, " ");
	while (pch != NULL)
	{
		printf("%s\n", pch);
		pch = strtok(NULL, " ");
	}

	cin >> a;
	return 0;
*/


/*处理数字*/
/*	int a;
	char * pch = "-0.0426138";
	string fc(pch);
	float f = stof(fc);
	f = f + 1.0;
	cout << f << endl;
	cin >> a;
	return 0;
*/


/*用opencv处理转换*/
/*	int i;
	//double r[3] = { 2.51185, 0.0654008, -0.0426138 };
	double r[3] = { -2.100418,-2.167796,0.273330 };
	double rot_mat[9];
	
	CvMat pr_vec;
	CvMat pR_matrix;

	cvInitMatHeader(&pr_vec, 1, 3, CV_64FC1, r, CV_AUTOSTEP);
	cvInitMatHeader(&pR_matrix, 3, 3, CV_64FC1, rot_mat, CV_AUTOSTEP);
	cvRodrigues2(&pr_vec, &pR_matrix, 0);


	for (i = 0; i<9; i++)
	{
		printf("%f\n", rot_mat[i]);
	}

	cin >> i;

	return 0;
*/	




















/*	Mat img = imread("D:\\document\\Image\\pflower.jpg");

	Mat channels[3];
	split(img, channels);

	imshow("original", img);
	//imshow("B", channels[0]);
	//imshow("G", channels[1]);
	//imshow("R", channels[2]);

	//channels[0] = Mat::zeros(img.rows, img.cols, CV_8UC1);
	//merge(channels, 3, img);
	//imshow("R_G_merge", img);

	string picvec = "D:\\workspace\\C++\\Opencv\\test\\Snowy_Ruanjian.jpg";
	string saveLocation = "D:\\workspace\\C++\\Opencv\\test\\";
	SLIC slic;
	int width(0);
	int height(0);

	width = img.cols;
	height = img.rows;

	int sz = width*height;

	int* labels = new int[sz];
	int numlabels(0);

	int m_spcount = 200;
	double m_compactness = 10.0;

	unsigned int* imgBuffer = new unsigned int[sz];;
	MatIterator_<uchar> B_it, B_end;
	MatIterator_<uchar> G_it, G_end;
	MatIterator_<uchar> R_it, R_end;

	G_it = channels[1].begin<uchar>();
	G_end = channels[1].end<uchar>();
	R_it = channels[2].begin<uchar>();
	R_end = channels[2].end<uchar>();
	int i = 0;
	for (B_it = channels[0].begin<uchar>(), B_end = channels[0].end<uchar>(); B_it != B_end; ++B_it){
		imgBuffer[i] = ((*R_it << 16) & 0xFF0000)
					+ ((*G_it << 8) & 0xFF00)
					+ ((*B_it) & 0xFF);

		++R_it;
		++G_it;
		++i;
	}

	slic.PerformSLICO_ForGivenK(imgBuffer, width, height, labels, numlabels, m_spcount, m_compactness);
	slic.DrawContoursAroundSegmentsTwoColors(imgBuffer, labels, width, height);
	slic.SaveSuperpixelLabels(labels, width, height, picvec, saveLocation);
	if (labels) delete[] labels;

	G_it = channels[1].begin<uchar>();
	G_end = channels[1].end<uchar>();
	R_it = channels[2].begin<uchar>();
	R_end = channels[2].end<uchar>();
	i = 0;
	for (B_it = channels[0].begin<uchar>(), B_end = channels[0].end<uchar>(); B_it != B_end; ++B_it){

		*R_it = (imgBuffer[i] >> 16) & 0xFF;
		*G_it = (imgBuffer[i] >> 8) & 0xFF;
		*B_it = (imgBuffer[i]) & 0xFF;

		++R_it;
		++G_it;
		++i;
	}

	merge(channels, 3, img);

	imshow("good image", img);
	waitKey(0);
*/
}
